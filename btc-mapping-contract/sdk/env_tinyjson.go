// Code generated by tinyjson for marshaling/unmarshaling. DO NOT EDIT.

package sdk

import (
	tinyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ tinyjson.Marshaler
)

func tinyjson2cc1611bDecodeExampleComBuildingTinyjsonSdk(in *jlexer.Lexer, out *EnvMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(EnvMap)
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v1 interface{}
			if m, ok := v1.(tinyjson.Unmarshaler); ok {
				m.UnmarshalTinyJSON(in)
			} else {
				v1 = in.Interface()
			}
			(*out)[key] = v1
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson2cc1611bEncodeExampleComBuildingTinyjsonSdk(out *jwriter.Writer, in EnvMap) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in {
			if v2First {
				v2First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v2Name))
			out.RawByte(':')
			if m, ok := v2Value.(tinyjson.Marshaler); ok {
				m.MarshalTinyJSON(out)
			} else {
				out.RawByte(',')
			}
		}
		out.RawByte('}')
	}
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v EnvMap) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson2cc1611bEncodeExampleComBuildingTinyjsonSdk(w, v)
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *EnvMap) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson2cc1611bDecodeExampleComBuildingTinyjsonSdk(l, v)
}
func tinyjson2cc1611bDecodeExampleComBuildingTinyjsonSdk1(in *jlexer.Lexer, out *Env) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contract.id":
			out.ContractId = string(in.String())
		case "tx.id":
			out.TxId = string(in.String())
		case "tx.index":
			out.Index = uint64(in.Uint64())
		case "tx.op_index":
			out.OpIndex = uint64(in.Uint64())
		case "block.id":
			out.BlockId = string(in.String())
		case "block.height":
			out.BlockHeight = uint64(in.Uint64())
		case "block.timestamp":
			out.Timestamp = string(in.String())
		case "sender":
			tinyjson2cc1611bDecodeExampleComBuildingTinyjsonSdk2(in, &out.Sender)
		case "msg.caller":
			out.Caller = Address(in.String())
		case "msg.payer":
			out.Payer = Address(in.String())
		case "intents":
			if in.IsNull() {
				in.Skip()
				out.Intents = nil
			} else {
				in.Delim('[')
				if out.Intents == nil {
					if !in.IsDelim(']') {
						out.Intents = make([]Intent, 0, 2)
					} else {
						out.Intents = []Intent{}
					}
				} else {
					out.Intents = (out.Intents)[:0]
				}
				for !in.IsDelim(']') {
					var v3 Intent
					tinyjson2cc1611bDecodeExampleComBuildingTinyjsonSdk3(in, &v3)
					out.Intents = append(out.Intents, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson2cc1611bEncodeExampleComBuildingTinyjsonSdk1(out *jwriter.Writer, in Env) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contract.id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ContractId))
	}
	{
		const prefix string = ",\"tx.id\":"
		out.RawString(prefix)
		out.String(string(in.TxId))
	}
	{
		const prefix string = ",\"tx.index\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Index))
	}
	{
		const prefix string = ",\"tx.op_index\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.OpIndex))
	}
	{
		const prefix string = ",\"block.id\":"
		out.RawString(prefix)
		out.String(string(in.BlockId))
	}
	{
		const prefix string = ",\"block.height\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.BlockHeight))
	}
	{
		const prefix string = ",\"block.timestamp\":"
		out.RawString(prefix)
		out.String(string(in.Timestamp))
	}
	{
		const prefix string = ",\"sender\":"
		out.RawString(prefix)
		tinyjson2cc1611bEncodeExampleComBuildingTinyjsonSdk2(out, in.Sender)
	}
	{
		const prefix string = ",\"msg.caller\":"
		out.RawString(prefix)
		out.String(string(in.Caller))
	}
	{
		const prefix string = ",\"msg.payer\":"
		out.RawString(prefix)
		out.String(string(in.Payer))
	}
	{
		const prefix string = ",\"intents\":"
		out.RawString(prefix)
		if in.Intents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Intents {
				if v4 > 0 {
					out.RawByte(',')
				}
				tinyjson2cc1611bEncodeExampleComBuildingTinyjsonSdk3(out, v5)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Env) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson2cc1611bEncodeExampleComBuildingTinyjsonSdk1(w, v)
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Env) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson2cc1611bDecodeExampleComBuildingTinyjsonSdk1(l, v)
}
func tinyjson2cc1611bDecodeExampleComBuildingTinyjsonSdk3(in *jlexer.Lexer, out *Intent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Args = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 string
					v6 = string(in.String())
					(out.Args)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson2cc1611bEncodeExampleComBuildingTinyjsonSdk3(out *jwriter.Writer, in Intent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		if in.Args == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Args {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				out.String(string(v7Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func tinyjson2cc1611bDecodeExampleComBuildingTinyjsonSdk2(in *jlexer.Lexer, out *Sender) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Address = Address(in.String())
		case "required_auths":
			if in.IsNull() {
				in.Skip()
				out.RequiredAuths = nil
			} else {
				in.Delim('[')
				if out.RequiredAuths == nil {
					if !in.IsDelim(']') {
						out.RequiredAuths = make([]Address, 0, 4)
					} else {
						out.RequiredAuths = []Address{}
					}
				} else {
					out.RequiredAuths = (out.RequiredAuths)[:0]
				}
				for !in.IsDelim(']') {
					var v8 Address
					v8 = Address(in.String())
					out.RequiredAuths = append(out.RequiredAuths, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "required_posting_auths":
			if in.IsNull() {
				in.Skip()
				out.RequiredPostingAuths = nil
			} else {
				in.Delim('[')
				if out.RequiredPostingAuths == nil {
					if !in.IsDelim(']') {
						out.RequiredPostingAuths = make([]Address, 0, 4)
					} else {
						out.RequiredPostingAuths = []Address{}
					}
				} else {
					out.RequiredPostingAuths = (out.RequiredPostingAuths)[:0]
				}
				for !in.IsDelim(']') {
					var v9 Address
					v9 = Address(in.String())
					out.RequiredPostingAuths = append(out.RequiredPostingAuths, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson2cc1611bEncodeExampleComBuildingTinyjsonSdk2(out *jwriter.Writer, in Sender) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"required_auths\":"
		out.RawString(prefix)
		if in.RequiredAuths == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.RequiredAuths {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"required_posting_auths\":"
		out.RawString(prefix)
		if in.RequiredPostingAuths == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.RequiredPostingAuths {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
