// Code generated by tinyjson for marshaling/unmarshaling. DO NOT EDIT.

package blocklist

import (
	tinyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ tinyjson.Marshaler
)

func tinyjson2d7d9c89DecodeExampleComBuildingTinyjsonBlocklist(in *jlexer.Lexer, out *BlockSeedInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "block_header":
			out.BlockHeader = string(in.String())
		case "block_height":
			out.BlockHeight = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson2d7d9c89EncodeExampleComBuildingTinyjsonBlocklist(out *jwriter.Writer, in BlockSeedInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"block_header\":"
		out.RawString(prefix[1:])
		out.String(string(in.BlockHeader))
	}
	{
		const prefix string = ",\"block_height\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.BlockHeight))
	}
	out.RawByte('}')
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v BlockSeedInput) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson2d7d9c89EncodeExampleComBuildingTinyjsonBlocklist(w, v)
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *BlockSeedInput) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson2d7d9c89DecodeExampleComBuildingTinyjsonBlocklist(l, v)
}
func tinyjson2d7d9c89DecodeExampleComBuildingTinyjsonBlocklist1(in *jlexer.Lexer, out *BlockData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "block_map":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.BlockMap = make(map[uint32]string)
				for !in.IsDelim('}') {
					key := uint32(in.Uint32Str())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.BlockMap)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "last_height":
			out.LastHeight = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson2d7d9c89EncodeExampleComBuildingTinyjsonBlocklist1(out *jwriter.Writer, in BlockData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"block_map\":"
		out.RawString(prefix[1:])
		if in.BlockMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.BlockMap {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.Uint32Str(uint32(v2Name))
				out.RawByte(':')
				out.String(string(v2Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"last_height\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.LastHeight))
	}
	out.RawByte('}')
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v BlockData) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson2d7d9c89EncodeExampleComBuildingTinyjsonBlocklist1(w, v)
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *BlockData) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson2d7d9c89DecodeExampleComBuildingTinyjsonBlocklist1(l, v)
}
func tinyjson2d7d9c89DecodeExampleComBuildingTinyjsonBlocklist2(in *jlexer.Lexer, out *AddBlockOutput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "success":
			out.Success = bool(in.Bool())
		case "error":
			out.Error = string(in.String())
		case "last_block_height":
			out.LastBlockHeight = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjson2d7d9c89EncodeExampleComBuildingTinyjsonBlocklist2(out *jwriter.Writer, in AddBlockOutput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Success))
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	{
		const prefix string = ",\"last_block_height\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.LastBlockHeight))
	}
	out.RawByte('}')
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AddBlockOutput) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjson2d7d9c89EncodeExampleComBuildingTinyjsonBlocklist2(w, v)
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AddBlockOutput) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjson2d7d9c89DecodeExampleComBuildingTinyjsonBlocklist2(l, v)
}
