// Code generated by tinyjson for marshaling/unmarshaling. DO NOT EDIT.

package mapping

import (
	tinyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ tinyjson.Marshaler
)

func tinyjsonA17a9c65DecodeExampleComBuildingTinyjsonMapping(in *jlexer.Lexer, out *VerificationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "block_height":
			out.BlockHeight = uint32(in.Uint32())
		case "raw_tx_hex":
			out.RawTxHex = string(in.String())
		case "merkle_proof_hex":
			out.MerkleProofHex = string(in.String())
		case "tx_index":
			out.TxIndex = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA17a9c65EncodeExampleComBuildingTinyjsonMapping(out *jwriter.Writer, in VerificationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"block_height\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.BlockHeight))
	}
	{
		const prefix string = ",\"raw_tx_hex\":"
		out.RawString(prefix)
		out.String(string(in.RawTxHex))
	}
	{
		const prefix string = ",\"merkle_proof_hex\":"
		out.RawString(prefix)
		out.String(string(in.MerkleProofHex))
	}
	{
		const prefix string = ",\"tx_index\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.TxIndex))
	}
	out.RawByte('}')
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v VerificationRequest) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA17a9c65EncodeExampleComBuildingTinyjsonMapping(w, v)
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *VerificationRequest) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA17a9c65DecodeExampleComBuildingTinyjsonMapping(l, v)
}
func tinyjsonA17a9c65DecodeExampleComBuildingTinyjsonMapping1(in *jlexer.Lexer, out *UtxoMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(UtxoMap)
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v1 Utxo
			(v1).UnmarshalTinyJSON(in)
			(*out)[key] = v1
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA17a9c65EncodeExampleComBuildingTinyjsonMapping1(out *jwriter.Writer, in UtxoMap) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in {
			if v2First {
				v2First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v2Name))
			out.RawByte(':')
			(v2Value).MarshalTinyJSON(out)
		}
		out.RawByte('}')
	}
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v UtxoMap) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA17a9c65EncodeExampleComBuildingTinyjsonMapping1(w, v)
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *UtxoMap) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA17a9c65DecodeExampleComBuildingTinyjsonMapping1(l, v)
}
func tinyjsonA17a9c65DecodeExampleComBuildingTinyjsonMapping2(in *jlexer.Lexer, out *Utxo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tx_id":
			out.TxId = string(in.String())
		case "vout":
			out.Vout = uint32(in.Uint32())
		case "amount":
			out.Amount = int64(in.Int64())
		case "pk_script":
			if in.IsNull() {
				in.Skip()
				out.PkScript = nil
			} else {
				out.PkScript = in.Bytes()
			}
		case "confirmed":
			out.Confirmed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA17a9c65EncodeExampleComBuildingTinyjsonMapping2(out *jwriter.Writer, in Utxo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tx_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.TxId))
	}
	{
		const prefix string = ",\"vout\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Vout))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"pk_script\":"
		out.RawString(prefix)
		out.Base64Bytes(in.PkScript)
	}
	{
		const prefix string = ",\"confirmed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Confirmed))
	}
	out.RawByte('}')
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v Utxo) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA17a9c65EncodeExampleComBuildingTinyjsonMapping2(w, v)
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *Utxo) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA17a9c65DecodeExampleComBuildingTinyjsonMapping2(l, v)
}
func tinyjsonA17a9c65DecodeExampleComBuildingTinyjsonMapping3(in *jlexer.Lexer, out *UnmappingInputData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA17a9c65EncodeExampleComBuildingTinyjsonMapping3(out *jwriter.Writer, in UnmappingInputData) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v UnmappingInputData) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA17a9c65EncodeExampleComBuildingTinyjsonMapping3(w, v)
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *UnmappingInputData) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA17a9c65DecodeExampleComBuildingTinyjsonMapping3(l, v)
}
func tinyjsonA17a9c65DecodeExampleComBuildingTinyjsonMapping4(in *jlexer.Lexer, out *ObservedTxList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(ObservedTxList)
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v6 bool
			v6 = bool(in.Bool())
			(*out)[key] = v6
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA17a9c65EncodeExampleComBuildingTinyjsonMapping4(out *jwriter.Writer, in ObservedTxList) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v7First := true
		for v7Name, v7Value := range in {
			if v7First {
				v7First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v7Name))
			out.RawByte(':')
			out.Bool(bool(v7Value))
		}
		out.RawByte('}')
	}
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v ObservedTxList) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA17a9c65EncodeExampleComBuildingTinyjsonMapping4(w, v)
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *ObservedTxList) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA17a9c65DecodeExampleComBuildingTinyjsonMapping4(l, v)
}
func tinyjsonA17a9c65DecodeExampleComBuildingTinyjsonMapping5(in *jlexer.Lexer, out *MappingInputData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tx_data":
			if in.IsNull() {
				in.Skip()
				out.TxData = nil
			} else {
				if out.TxData == nil {
					out.TxData = new(VerificationRequest)
				}
				(*out.TxData).UnmarshalTinyJSON(in)
			}
		case "raw_instructions":
			if in.IsNull() {
				in.Skip()
				out.RawInstructions = nil
			} else {
				in.Delim('[')
				if out.RawInstructions == nil {
					if !in.IsDelim(']') {
						out.RawInstructions = make([]string, 0, 4)
					} else {
						out.RawInstructions = []string{}
					}
				} else {
					out.RawInstructions = (out.RawInstructions)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.RawInstructions = append(out.RawInstructions, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA17a9c65EncodeExampleComBuildingTinyjsonMapping5(out *jwriter.Writer, in MappingInputData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tx_data\":"
		out.RawString(prefix[1:])
		if in.TxData == nil {
			out.RawString("null")
		} else {
			(*in.TxData).MarshalTinyJSON(out)
		}
	}
	{
		const prefix string = ",\"raw_instructions\":"
		out.RawString(prefix)
		if in.RawInstructions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.RawInstructions {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v MappingInputData) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA17a9c65EncodeExampleComBuildingTinyjsonMapping5(w, v)
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *MappingInputData) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA17a9c65DecodeExampleComBuildingTinyjsonMapping5(l, v)
}
func tinyjsonA17a9c65DecodeExampleComBuildingTinyjsonMapping6(in *jlexer.Lexer, out *HeaderMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(HeaderMap)
		for !in.IsDelim('}') {
			key := uint32(in.Uint32Str())
			in.WantColon()
			var v11 []uint8
			if in.IsNull() {
				in.Skip()
				v11 = nil
			} else {
				v11 = in.Bytes()
			}
			(*out)[key] = v11
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA17a9c65EncodeExampleComBuildingTinyjsonMapping6(out *jwriter.Writer, in HeaderMap) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v13First := true
		for v13Name, v13Value := range in {
			if v13First {
				v13First = false
			} else {
				out.RawByte(',')
			}
			out.Uint32Str(uint32(v13Name))
			out.RawByte(':')
			out.Base64Bytes(v13Value)
		}
		out.RawByte('}')
	}
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v HeaderMap) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA17a9c65EncodeExampleComBuildingTinyjsonMapping6(w, v)
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *HeaderMap) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA17a9c65DecodeExampleComBuildingTinyjsonMapping6(l, v)
}
func tinyjsonA17a9c65DecodeExampleComBuildingTinyjsonMapping7(in *jlexer.Lexer, out *AccountInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "modified_at":
			out.ModifiedAt = uint64(in.Uint64())
		case "address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA17a9c65EncodeExampleComBuildingTinyjsonMapping7(out *jwriter.Writer, in AccountInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"modified_at\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ModifiedAt))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	out.RawByte('}')
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AccountInfo) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA17a9c65EncodeExampleComBuildingTinyjsonMapping7(w, v)
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AccountInfo) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA17a9c65DecodeExampleComBuildingTinyjsonMapping7(l, v)
}
func tinyjsonA17a9c65DecodeExampleComBuildingTinyjsonMapping8(in *jlexer.Lexer, out *AccountBalanceMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(AccountBalanceMap)
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v16 int64
			v16 = int64(in.Int64())
			(*out)[key] = v16
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonA17a9c65EncodeExampleComBuildingTinyjsonMapping8(out *jwriter.Writer, in AccountBalanceMap) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v17First := true
		for v17Name, v17Value := range in {
			if v17First {
				v17First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v17Name))
			out.RawByte(':')
			out.Int64(int64(v17Value))
		}
		out.RawByte('}')
	}
}

// MarshalTinyJSON supports tinyjson.Marshaler interface
func (v AccountBalanceMap) MarshalTinyJSON(w *jwriter.Writer) {
	tinyjsonA17a9c65EncodeExampleComBuildingTinyjsonMapping8(w, v)
}

// UnmarshalTinyJSON supports tinyjson.Unmarshaler interface
func (v *AccountBalanceMap) UnmarshalTinyJSON(l *jlexer.Lexer) {
	tinyjsonA17a9c65DecodeExampleComBuildingTinyjsonMapping8(l, v)
}
